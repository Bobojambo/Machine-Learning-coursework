# -*- coding: utf-8 -*-
"""
Created on Thu Jan 25 12:54:09 2018

@author: hakala24
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

#Generate a 100-sample long synthetic test signal from the model:
#x[n] = sin (2πf0n) + w[n], n = 0, 1, . . . , 99
#with f0 = 0.017 and w[n] ∼ N (0, 0.25). Note that w[n] is generated by
#w = numpy.sqrt(0.25) * numpy.random.randn(100). Plot the
#result.

#Exercise 3a
n = np.arange(100)
f_0 = 0.017
w = np.sqrt(0.25) * np.random.randn(100)

x = np.sin(2*np.pi*f_0*n) + w

plt.plot(x)



#Implement code from estimating the frequency of x using the maximum
#likelihood estimator:
#^f0 = value of f that maximizes

#N X−1 n=0  x(n)e^(−2πifn)




#Exercise 3b

scores = []
frequencies = []
for f in np.linspace(0, 0.5, 1000):
    
    # Create vector e. Assume data is in x.
    n = np.arange(100)
    z = -2*np.pi*1j*f*n # <compute -2*pi*i*f*n. Imaginary unit is 1j>
    e = np.exp(z)
    
    score = np.abs(np.dot(x,e)) # <compute abs of dot product of x and e>
    scores.append(score)
    frequencies.append(f)
    
fHat = frequencies[np.argmax(scores)]

print("f_o = ", f_0, "....  fHat = ", fHat)


#Exercise 4

digits = load_digits()
print(digits.keys())

#Check digits first element
plt.gray()
plt.imshow(digits.images[0])
plt.show()
print(digits.target[0])

x_train,x_test,y_train,y_test = train_test_split(digits.data,digits.target, test_size = 0.2, random_state=43)


#Exercise 5

clf = KNeighborsClassifier() #5 nearest neighbours is default constructor
clf.fit(x_train, y_train)

example_sample = x_test[1]

print(clf.predict_proba([example_sample]))
print(clf.score(x_test, y_test))


#>>> X = [[0], [1], [2], [3]]
#>>> y = [0, 0, 1, 1]
#>>> from sklearn.neighbors import KNeighborsClassifier
#>>> neigh = KNeighborsClassifier(n_neighbors=3)
#>>> neigh.fit(X, y) 
#KNeighborsClassifier(...)
#>>> print(neigh.predict([[1.1]]))
#[0]
#>>> print(neigh.predict_proba([[0.9]]))
#[[ 0.66666667  0.33333333]]






